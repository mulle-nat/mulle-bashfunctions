#! /usr/bin/env mulle-bash
#! MULLE_BASHFUNCTIONS_VARIANT=minimal
#
# shellcheck shell=bash
# shellcheck disable=SC2236
# shellcheck disable=SC2166
# shellcheck disable=SC2006
#
#   Copyright (c) 2015-2017 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
[ "${TRACE}" = 'YES' -o "${MULLE_BASHFUNCTIONS_ENV_TRACE}" = 'YES' ] && set -x && : "${MULLE_EXECUTABLE}" "$@"


usage()
{
   [ ! -z "$*" ] && echo "error: $*" >&2

   cat <<EOF
Usage:
   ${MULLE_EXECUTABLE_NAME} [command]

   mulle-bashfunctions main purpose is to help load the library functions
   into an interactive shell. The library functions are almalgamated in a
   file called "mulle-bashfunctions.sh". There are variants though (none,
   minimal, all) with different sizes.

   But mulle-bashfunctions can also

   * embed "mulle-bashfunctions.sh" into another shell script
   * show the path to "mulle-bashfunctions.sh"
   * locate the "mulle-bashfunctions.sh" install path for a desired variant
   * show documentation for any of the defined functions
   * list the available libraries, which you can "include"

Examples:
   Load "mulle-bashfunctions-all.sh" into the current interactive shell:

      eval \`mulle-bashfunctions load all\`

Commands:
   env            : environment needed for "mulle-bashfunctions.sh"
   functions      : list defined functions
   hostname       : show system hostname used by mulle-bashfunctions
   libraries      : list available libraries
   load [variant] : use  eval \`mulle-bashfunctions load\`  to load
   man <function> : show documention for function, if available
   path [variant] : path to "mulle-bashfunctions.sh"
   username       : show username used by mulle-bashfunctions
   uname          : show system short name used by mulle-bashfunctions
   version        : print currently used version
   versions       : list installed versions
EOF

   exit 1
}


list_versions()
{
   log_entry "list_versions" "$@"

   [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ] && _internal_fail "MULLE_BASHFUNCTIONS_LIBEXEC_DIR not set"

   local i
   local found

   shell_enable_nullglob

   local prefix

   prefix="${MULLE_BASHFUNCTIONS_LIBEXEC_DIR%/*}"
   for i in "${prefix}"/[0-9]*.[0-9]*.[0-9]*
   do
      if [ -d "${i}" ]
      then
         basename -- "${i}"
         found="yes"
      fi
   done

   if [ -z "${found}" ]
   then
      printf "${MULLE_BASHFUNCTIONS_VERSION}\n"
   fi
}


r_all_library_paths()
{
   log_entry "r_all_library_paths" "$@"

   local paths

   local library
   local name

   shell_enable_nullglob
   for library in "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}"/mulle-*.sh
   do
      name="`basename -- "${library}"`"
      case "${name}" in
         mulle-bash*.sh|mulle-boot.sh)
         ;;

         *)
            if [ -z "${paths}" ]
            then
               paths="${library}"
            else
               paths="${paths}"$'\n'"${library}"
            fi
         ;;
      esac
   done
   shell_disable_nullglob
   RVAL="${paths}"
}


r_library_name()
{
   log_entry "r_library_name" "$@"

   RVAL="${1##*/}"
   RVAL="${RVAL#mulle-}"
   RVAL="${RVAL%.sh}"
}


list_libraries()
{
   log_entry "list_libraries" "$@"

   local paths

   r_all_library_paths
   paths="${RVAL}"

   local library

   IFS=$'\n'
   for library in ${paths}
   do
      r_library_name "${library}"
      printf "${RVAL}\n"
   done
   IFS="${DEFAULT_IFS}"
}


parse_library()
{
   log_entry "parse_library" "$@"

   local library="$1"

   local line
   local comment
   local sep
   local color1="${C_RESET_BOLD}"
   local color2="${C_RESET}"

   IFS=$'\n'
   while read -r line
   do
      #
      # special commands RESET,NOCOLOR,PRE,COLOR only work _well_ in the
      # TITLE INTRO block
      #
      case "${line}" in
         \#\ RESET)
            comment=""
            sep=""
         ;;

         \#\ NOCOLOR)
            color1=""
            color2=""
         ;;

         \#\ PRE)
            comment="${comment}${C_SPECIAL_BLUE}"
         ;;

         \#\ \/PRE)
            comment="${comment}${C_RESET}${C_FAINT}"
         ;;

         \#\ COLOR)
            color1="${C_RESET_BOLD}"
            color2="${C_RESET}"
         ;;

         \#\ TITLE*)
            printf "${C_INFO}${line#\#\ TITLE\ }\n${C_RESET}"
            printf "${C_FAINT}%b${C_RESET}\n\n" "${comment%%$'\n'}"
         ;;

         \#\ SUBTITLE*)
            printf "${C_VERBOSE}${line#\#\ SUBTITLE\ }\n${C_RESET}"
            printf "${C_FAINT}%b${C_RESET}\n\n" "${comment%%$'\n'}"
         ;;

         \#)
            if [ ! -z "${sep}" ]
            then
               comment="${comment}${sep}"
            fi
         ;;

         \#*)
            line="${line##\#\ }"
            if [ ! -z "${sep}" ]
            then
               comment="${comment}${sep}${line}"
               sep=${color2}$'\n'
            else
               if [ ! -z "${line}" ]
               then
                  comment="${comment}${sep}${line}"
                  sep=$'\n'
               fi
            fi
         ;;

         function\ *\(\)*|alias\ *)
            printf "%b\n\n" "${comment%%$'\n'}"
         ;;

         *)
            comment=""
            sep="${color1}"
         ;;
      esac
   done < "${library}"
   IFS="${DEFAULT_IFS}"
}


list_library_functions()
{
   log_entry "list_library_functions" "$@"

   local library="$1"
   local namesonly="$2"

   if [ ! -z "${namesonly}" ]
   then
      sed -n 's/^\([a-z0-9A-Z:][a-z0-9A-Z:_]*\)().*/   \1/p' "${library}" | sort
   else
      parse_library "${library}"
   fi
}


list_functions()
{
   log_entry "list_functions" "$@"

   local library="$1"
   local namesonly="$2"

   if [ -z "${library}" ]
   then
      local paths

      r_all_library_paths
      paths="${RVAL}"

      local sep

      IFS=$'\n'
      for library in ${paths}
      do
         r_library_name "${library}"
         log_info "${sep}${RVAL}:"
         list_library_functions "${library}" "${namesonly}"
         sep=$'\n'
      done
   else
      library="${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-$1.sh"
      if [ -f "${library}" ]
      then
         list_library_functions "${library}" "${namesonly}"
      else
         fail "Library \"$1\" not found"
      fi
   fi
}


man_library_function()
{
   log_entry "man_library_function" "$@"

   local library="$1"
   local identifier="$2"

   local text
   local line

   while IFS=$'\n' read -r line
   do
      case "${line}" in
         '#'*)
            line="${line#\#}"
            line="${line#\ }"
            text="${text}${sep}${line}"
            sep=$'\n'
            continue
         ;;

         ${identifier}\(\)|function\ ${identifier}\(\))
            sed -e 's/^# //' <<< "${text}"
            return 0
         ;;

         *)
            text=
            sep=
         ;;
      esac
   done < <( cat "${library}" )

   return 1
}


man_function()
{
   log_entry "man_function" "$@"

   local name="$1"

   local paths

   r_all_library_paths
   paths="${RVAL}"

   local identifier

   r_lowercase "${name}"
   r_identifier "${RVAL}"
   identifier="${RVAL}"

   local library

   IFS=$'\n'
   for library in ${paths}
   do
      if man_library_function "${library}" "${identifier}"
      then
         return 0
      fi
   done

   # search for transposed bits
   local prefix

   prefix="${identifier:0:2}"
   case "${prefix}" in
      'r_'|'g_')
         identifier="${identifier:2}"
      ;;

      *)
         prefix=""
      ;;
   esac

   #
   # cut identifier into pieces and multiply it out
   #
   # A B C 012
   # A C B 021
   # B A C 102
   # B C A 120
   # C A B 201
   # C B A 210
   #
   local n
   local piece
   local loops

   declare -a pieces

   IFS="_"
   n=0
   loops=1
   for piece in ${identifier}
   do
      pieces[$n]="${piece}"
      n=$(( n + 1 ))
      loops=$(( loops * n ))
   done

   if [ $n -lt 5 ]
   then
      local tmp
      local i
      local next
      local flip

      for prefix in "" "r_" "g_"
      do
         i=0
         flip=0
         while [ $i -lt $loops ]
         do
            j=0
            identifier=""
            while [ $j -lt $n ]
            do
               r_concat "${identifier}" "${pieces[$j]}" "_"
               identifier="${RVAL}"
               j=$(( j + 1 ))
            done

            IFS=$'\n'
            for library in ${paths}
            do
               if man_library_function "${library}" "${prefix}${identifier}"
               then
                  return 0
               fi
            done

            if [ $n -gt 1 ]
            then
               next=$(( (flip + 1) % n ))
               if [ $next -eq 0 ]
               then
                  flip=0
                  next=1
               fi

               tmp="${pieces[$flip]}"
               pieces[$flip]="${pieces[$next]}"
               pieces[$next]="${tmp}"
               flip=$next
            fi
            i=$(( i + 1 ))
         done
      done
   fi

   IFS="${DEFAULT_IFS}"
   log_error "Function ${C_RESET_BOLD}${name}${C_ERROR} is unknown."
}



HEAD_MARKER='### >> START OF mulle-bashfunctions-embed.sh >>'
FOOT_MARKER='### << END OF mulle-bashfunctions-embed.sh <<'

BOOT_HEAD_MARKER='### >> START OF mulle-boot.sh >>'
BOOT_FOOT_MARKER='### << END OF mulle-boot.sh <<'


mulle_bashfunctions_usage()
{
   [ $# -ne 0 ] && log_error "$*"


   cat <<EOF >&2
Usage:
   mulle-bashfunctions embed

   Insert or update the mulle-bashfunctions-embed.sh code between these two
   markers:

   ${HEAD_MARKER}
   ${FOOT_MARKER}

   Insert or update the mulle-boot.sh code between these two markers:

   ${BOOT_HEAD_MARKER}
   ${BOOT_FOOT_MARKER}


   This lazy script just reads from stdio and outputs to stdout.

EOF
   exit 1
}


mulle_boot_embed()
{
   while [ $# -ne 0 ]
   do
      case "$1" in
         *)
            mulle_bashfunctions_usage
         ;;
      esac
   done

   local line

   # initial state, searching for start
   IFS=$'\n'
   while read -r line
   do
      if [ "${line}" = "${BOOT_HEAD_MARKER}" ]
      then
         break
      fi
      printf "%s\n" "${line}"
   done

   # start found and consumed now put in embed.sh
   cat "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-boot.sh" || exit 1

   # now search for end
   while read -r line
   do
      if [ "${line}" = "${BOOT_FOOT_MARKER}" ]
      then
         break
      fi
   done

   # output rest
   while read -r line
   do
      printf "%s\n" "${line}"
   done
}


mulle_bashfunctions_embed()
{
   while [ $# -ne 0 ]
   do
      case "$1" in
         *)
            mulle_bashfunctions_usage
         ;;
      esac
   done

   local line

   # initial state, searching for start
   IFS=$'\n'
   while read -r line
   do
      if [ "${line}" = "${HEAD_MARKER}" ]
      then
         break
      fi
      printf "%s\n" "${line}"
   done

   # start found and consumed now put in embed.sh
   cat "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions-embed.sh" || exit 1

   # now search for end
   while read -r line
   do
      if [ "${line}" = "${FOOT_MARKER}" ]
      then
         break
      fi
   done

   # output rest
   while read -r line
   do
      printf "%s\n" "${line}"
   done
}


main()
{
   #
   # simple option handling
   #
   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -h|--help)
            usage
         ;;

         --version)
            printf "%s\n" "${MULLE_BASHFUNCTIONS_VERSION}"
            exit 0
         ;;

         -*)
            log_error "${MULLE_EXECUTABLE_FAIL_PREFIX}: Unknown option \"$1\""
            usage
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}" && set -x

   local cmd

   cmd="${1:-libexec-dir}"
   [ $# -eq 0 ] || shift

   MULLE_EXECUTABLE_FAIL_PREFIX="${MULLE_EXECUTABLE_NAME} ${cmd}"

   case "${cmd}" in
      help)
         usage
      ;;

      env)
         echo "\
MULLE_BASHFUNCTIONS_LIBEXEC_DIR=\"${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}\"
MULLE_USERNAME=\"${MULLE_USERNAME}\"
MULLE_HOSTNAME=\"${MULLE_HOSTNAME}\"
MULLE_UNAME=\"${MULLE_UNAME}\""
      ;;

      embed)
         mulle_bashfunctions_embed "$@" | mulle_boot_embed "$@"
      ;;

      functions)
         list_functions "$@" || exit 1
      ;;

      hostname)
         printf "%s\n" "${MULLE_HOSTNAME}"
      ;;

      init|script)
         fail "Use mulle-sde add --extension \"mulle-nat/file.sh\" instead"
      ;;

      libexec-dir)
         printf "%s\n" "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}"
      ;;

      libraries)
         list_libraries "$@" || exit 1
      ;;

      load)
         local format

         [ $# -ne 0 ] && format="-$1"

         echo "\
MULLE_BASHFUNCTIONS_LIBEXEC_DIR=\"${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}\" ;
export MULLE_BASHFUNCTIONS_LIBEXEC_DIR ;
MULLE_USERNAME=\"${MULLE_USERNAME}\" ;
export MULLE_USERNAME ;
MULLE_HOSTNAME=\"${MULLE_HOSTNAME}\" ;
export MULLE_HOSTNAME ;
MULLE_UNAME=\"${MULLE_UNAME}\" ;
export MULLE_UNAME ;
. \"${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions${format}.sh\"
"
      ;;

      man)
         man_function "$@" || exit 1
      ;;

      ncores)
         include "path"
         include "file"
         include "parallel"

         r_get_core_count
         printf "%s\n" "${RVAL}"
      ;;

      path)
         local format

         [ $# -ne 0 ] && format="-$1"

         echo "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions${format}.sh"
      ;;

      shell)
         printf "%s\n" `ps -h -o cmd -p $$ | awk '{ print $1 }'`
      ;;

      uname)
         printf "%s\n" "${MULLE_UNAME}"
      ;;

      username)
         printf "%s\n" "${MULLE_USERNAME}"
      ;;

      uuid)
         include "path"
         include "file"

         r_uuidgen
         printf "%s\n" "${RVAL}"
      ;;

      version)
         printf "%s\n" "${MULLE_BASHFUNCTIONS_VERSION}"
      ;;

      versions)
         list_versions "$@" || exit 1
      ;;

      *)
         usage "${MULLE_EXECUTABLE_FAIL_PREFIX}: Unknown command \"${cmd}\""
      ;;
   esac
}


_init()
{
   if [ ${ZSH_VERSION+x} ]
   then
     setopt sh_word_split
   fi

   #
   # commands with minimal trap setup. libexec-dir is the most common call
   # and will exit quickly
   #
   if [ $# -eq 1 ]
   then
      case "$1" in
         libexec-dir|library-path)
            printf "%s\n" "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}"
            exit 0
         ;;

         version)
            printf "%s\n" "${MULLE_BASHFUNCTIONS_VERSION}"
            exit 0
         ;;
      esac
   fi

   # shellcheck source=src/mulle-logging.sh
   include "logging" || _internal_fail "include mulle-version.sh fail"
   # shellcheck source=src/mulle-version.sh
   include "version" || _internal_fail "include mulle-version.sh fail"

   shell_enable_pipefail
   shell_enable_extglob
}


_init "$@"
main "$@"

