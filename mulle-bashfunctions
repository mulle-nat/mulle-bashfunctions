#! /bin/sh
#
#   Copyright (c) 2015-2017 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
[ "${TRACE}" = 'YES' -o "${MULLE_BASHFUNCTIONS_ENV_TRACE}" = 'YES' ] && set -x && : "$0" "$@"

MULLE_BASHFUNCTIONS_VERSION="4.0.0"

#
# Prelude to be placed at top of each script. Rerun this script either in
# bash or zsh, if not already running in either (which can happen!)
# Allows script to run on systems that either have bash (linux) or
# zsh (macOS) only by default.
#
if [ "$1" != --no-auto-shell ]
then
   if [ -z "${BASH_VERSION}" -a -z "${ZSH_VERSION}" ]
   then
      exe_shell="`command -v "bash" `"
      exe_shell="${exe_shell:-`command -v "zsh" `}"

      script="$0"

      #
      # Quote incoming arguments for shell expansion
      #
      args=""
      for arg in "$@"
      do
         # True bourne sh doesn't know ${a//b/c} and <<<
         case "${arg}" in
            *\'*)
               # Use cat instead of echo to avoid possible echo -n
               # problems. Escape single quotes in string.
               arg="`cat <<EOF | sed -e s/\'/\'\\\"\'\\\"\'/g
${arg}
EOF
`"
            ;;
         esac
         if [ -z "${args}" ]
         then
            args="'${arg}'"
         else
            args="${args} '${arg}'"
         fi
      done

      #
      # bash/zsh will use arg after -c <arg> as $0, convenient!
      #

      exec "${exe_shell:-bash}" -c ". ${script} --no-auto-shell ${args}" "${script}"
   fi
   if [ ! -z "${BASH_VERSION}" ]
   then
      set +o posix
   fi
else
   shift    # get rid of --no-auto-shell
fi

#
# leading backslash ? looks like we're getting called from
# mingw via a .BAT or so. Correct this now
#
case "$PATH" in
   '\\'*)
      PATH="${PATH//\\/\/}"
   ;;
esac

MULLE_EXECUTABLE="${BASH_SOURCE[0]:-${(%):-%x}}"


usage()
{
   [ ! -z "$*" ] && echo "error: $*" >&2

   cat <<EOF
Usage:
   ${MULLE_EXECUTABLE_NAME} [command]

   Locate bashfunctions install path for desired version.

Commands:
   libexec-dir [version]   : print best libexec filepath for desired version
   list                    : list installed versions
   uname                   : show system short name
   version                 : print most recent version
EOF

   exit 1
}



list_libraries()
{
   for i in "${MULLE_LIBEXECBASE_PATH}"/[0-9]*.[0-9]*.[0-9]*
   do
      if [ -d "${i}" ]
      then
         basename -- "${i}"
      fi
   done
}


#
# Usually one requests the library by major.minor number
# and one gets that with the latest patch
#
_find_library_path()
{
   local version="$1"

   local major
   local minor
   local patch

   r_get_version_major "${version}"
   major="${RVAL}"
   r_get_version_minor "${version}"
   minor="${RVAL}"
   r_get_version_patch "${version}"
   patch="${RVAL}"

   local majorpattern
   local minorpattern
   local patchpattern

   majorpattern="${major:-[0-9]*}"
   minorpattern="${minor:-[0-9]*}"
   patchpattern="${patch:-[0-9]*}"

   local prefix

   prefix="${MULLE_BASHFUNCTIONS_LIBEXEC_DIR%/*}"

   ls -1d "${prefix}"/${majorpattern}.${minorpattern}.${patchpattern} 2> /dev/null | sort -nr | head -1
}


_find_local_library_path()
{
   local version="$1"

   if ! is_compatible_version "${MULLE_BASHFUNCTIONS_VERSION}" "${version}"
   then
      return 1
   fi
   printf "%s\n" "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}"
}


find_library_path()
{
   case "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" in
      */src)
         if _find_local_library_path "$@"
         then
            return
         fi
      ;;
   esac

   _find_library_path "$@"
}


main()
{
   #
   # simple option handling
   #
   while [ $# -ne 0 ]
   do
      case "$1" in
         -h|--help)
            usage
         ;;

         --version)
            printf "%s\n" "${MULLE_BASHFUNCTIONS_VERSION}"
            exit 0
         ;;

         -v|-vv|-vvv)
         ;;

         -ld|-ls|-lx)
         ;;

         -t)
            set -x
         ;;

         -*)
            log_error "${MULLE_EXECUTABLE_FAIL_PREFIX}: Unknown option \"$1\""
            usage
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   local cmd

   cmd="${1:-libexec-dir}"

   MULLE_EXECUTABLE_FAIL_PREFIX="${MULLE_EXECUTABLE_NAME} ${cmd}"
   [ $# -eq 0 ] || shift

   case "${cmd}" in
      help)
         usage
      ;;

      boot*)
         echo "\
MULLE_BASHFUNCTIONS_LIBEXEC_DIR=\"${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}\"
export MULLE_BASHFUNCTIONS_LIBEXEC_DIR
MULLE_USERNAME=\"${MULLE_USERNAME}\"
export MULLE_USERNAME
MULLE_HOSTNAME=\"${MULLE_HOSTNAME}\"
export MULLE_HOSTNAME
MULLE_UNAME=\"${MULLE_UNAME}\"
export MULLE_UNAME"

         cat "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions-${cmd}.sh"
      ;;

      init|script)
         fail "Use mulle-sde add --extension \"mulle-nat/file.sh\" instead"
      ;;

      username)
         echo "${MULLE_USERNAME}"
      ;;

      hostname)
         echo "${MULLE_HOSTNAME}"
      ;;

      libexec-dir|library-path)
         if [ $# -eq 0 ]
         then
            printf "%s\n" "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}"
            return 0
         fi

         find_library_path "$@"
      ;;

      list)
         list_libraries "$@" || exit 1
      ;;

      uname)
         echo "${MULLE_UNAME}"
      ;;

      version)
         printf "%s\n" "${MULLE_BASHFUNCTIONS_VERSION}"
      ;;

      *)
         log_error "${MULLE_EXECUTABLE_FAIL_PREFIX}: Unknown command \"${cmd}\""
         usage
      ;;
   esac
}



#
# ####
# #### this is a duplicate of mulle-init
# #### Do not edit this, edit mulle-init and then copy back to here
# ####
#

# export into RVAL global
r_dirname()
{
   RVAL="$1"

   while :
   do
      case "${RVAL}" in
         /)
            return
         ;;

         */)
            RVAL="${RVAL%?}"
            continue
         ;;
      esac
      break
   done

   local last

   last="${RVAL##*/}"
   RVAL="${RVAL%${last}}"

   while :
   do
      case "${RVAL}" in
         /)
           return
         ;;

         */)
            RVAL="${RVAL%?}"
         ;;

         *)
            RVAL="${RVAL:-.}"
            return
         ;;
      esac
   done
}


#
# ####
# #### this is a duplicate of mulle-init
# #### Do not edit this, edit mulle-init and then copy back to here
# ####
#

# result in RVAL global
r_resolve_symlinks()
{
   if RVAL="`readlink "$1"`"
   then
      case "${RVAL}" in
         /*)
            r_resolve_symlinks "${RVAL}"
         ;;

         *)
            local linkpath

            linkpath="${RVAL}"
            r_dirname "$1"
            r_resolve_symlinks "${RVAL}/${linkpath}"
         ;;
      esac
   else
      RVAL="$1"
   fi
}


#
# ####
# #### this is a duplicate of mulle-init
# #### Do not edit this, edit mulle-init and then copy back to here
# ####
#


#
# executablepath: will be $0
# subdir: will be mulle-bashfunctions/${VERSION}
# matchfile: the file to match agains
#
# Written this way, so it can get reused
#
r_get_libexec_dir()
{
   local executablepath="$1"
   local subdir="$2"
   local matchfile="$3"

   local exedirpath
   local prefix

   case "${executablepath}" in
      \.*|/*|~*)
      ;;

      *)
         executablepath="`command -v "${executablepath}"`"
      ;;
   esac

   r_resolve_symlinks "${executablepath}"
   executablepath="${RVAL}"

   r_dirname "${executablepath}"
   exedirpath="${RVAL}"

   r_dirname "${exedirpath}"
   prefix="${RVAL}"


   # now setup the global variable

   RVAL="${prefix}/libexec/${subdir}"
   if [ ! -f "${RVAL}/${matchfile}" ]
   then
      RVAL="${exedirpath}/src"
   fi

   case "$RVAL" in
      /*|~*)
      ;;

      .)
         RVAL="$PWD"
      ;;

      *)
         RVAL="$PWD/${RVAL}"
      ;;
   esac

   if [ ! -f "${RVAL}/${matchfile}" ]
   then
      unset RVAL
   fi
}


#
# Memo: to avoid confusion
#    variables containing a filesystem path to a directory end with _DIR
#    other variables containing a filesystem path end with _FILE
#    variables containing search paths end with _PATH
#
_fatal()
{
   echo "$0 fatal error: $*" >&2
   exit 1
}

_init()
{
   #
   # leading backslash ? looks like we're getting called from
   # mingw via a .BAT or so
   #
   case "$PATH" in
      '\\'*)
         PATH="${PATH//\\/\/}"
      ;;
   esac

   if [ ! -z "${ZSH_VERSION}" ]
   then
     setopt sh_word_split
   fi

   # nice for tests
   if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
   then
      r_get_libexec_dir "${MULLE_EXECUTABLE}" \
                        "mulle-bashfunctions/${MULLE_BASHFUNCTIONS_VERSION}" \
                        "mulle-bashfunctions.sh"

      if [ -z "${RVAL}" ]
      then
         _fatal "Could not find libexec (PWD: $PWD)"
      fi
      MULLE_BASHFUNCTIONS_LIBEXEC_DIR="${RVAL}"
   fi

   #
   # commands with minimal trap setup
   #
   if [ $# -eq 1 ]
   then
      case "${1}" in
         libexec-dir|library-path)
            printf "%s\n" "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}"
            exit 0
         ;;

         version)
            printf "%s\n" "${MULLE_BASHFUNCTIONS_VERSION}"
            exit 0
         ;;
      esac
   fi

   # shellcheck source=src/mulle-compatibility.sh
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions-minimal.sh" || _fatal "loading mulle-bashfunctions-minimal.sh failed"

   # shellcheck source=src/mulle-logging.sh
   include "logging" || internal_fail "include mulle-version.sh fail"
   # shellcheck source=src/mulle-version.sh
   include "version" || internal_fail "include mulle-version.sh fail"

   shell_enable_pipefail
   shell_enable_extglob
}


_init "$@"
main "$@"

