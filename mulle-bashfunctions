#! /usr/bin/env mulle-bash
#! MULLE_BASHFUNCTIONS_VARIANT=minimal
#
# shellcheck shell=bash
# shellcheck disable=SC2236
# shellcheck disable=SC2166
# shellcheck disable=SC2006
#
#   Copyright (c) 2015-2017 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
[ "${TRACE}" = 'YES' -o "${MULLE_BASHFUNCTIONS_ENV_TRACE}" = 'YES' ] && set -x && : "${MULLE_EXECUTABLE}" "$@"


usage()
{
   [ ! -z "$*" ] && echo "error: $*" >&2

   cat <<EOF >&2
Usage:
   ${MULLE_EXECUTABLE_NAME} [command]

   Use ${MULLE_EXECUTABLE_NAME} to

   * load the mulle-bashfunctions into an interactive shell
   * show documentation for the provided shell functions
   * embed "mulle-bashfunctions.sh" into another shell script
   * show the path to "mulle-bashfunctions.sh"
   * locate the "mulle-bashfunctions.sh" install path for a desired variant
   * list the available libraries, which you can "include"
   * run an arbitrary mulle-bashfunction with eval and r-eval
   * get some information about the execution environment

Example:
   Load mulle-bashfunctions into the current interactive shell:

      eval \`mulle-bashfunctions load all\`

   Now try out an r_function, a function which returns a value in the global
   variable RVAL:

      r_escaped_json '{ "url": "https://www.mulle-kybernetik.com" }'
      echo \$RVAL

Commands:
   apropos <f>    : search for a function by keywords
   embed          : embed mulle-bashfunctions into a script
   common-unames  : list of known values for uname
   env            : print environment needed for "mulle-bashfunctions.sh"
   eval <cmd>     : evaluate cmd inside of mulle-bashfunctions
   globals [-a]   : list global MULLE_ prefixed variables, -a for all globals
   functions      : list defined functions
   hostname       : show system hostname as used by mulle-bashfunctions
   libraries      : list available libraries
   load [variant] : eval \`mulle-bashfunctions load <none|minimal|all>\`
   man <function> : show documention for function, if available
   new <name>     : prints a mulle-bash shell script
   path [variant] : path to "mulle-bashfunctions.sh"
   r-eval <cmd>   : evaluate cmd inside of mulle-bashfunctions and print RVAL
   shell          : path of executing shell
   username       : show username as used by mulle-bashfunctions
   uname          : show system short name as used by mulle-bashfunctions
   uuid           : generate a UUID
   version        : print currently used version
   versions       : list installed versions

EOF

   exit 1
}


list_versions()
{
   log_entry "list_versions" "$@"

   [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ] && _internal_fail "MULLE_BASHFUNCTIONS_LIBEXEC_DIR not set"

   local i
   local found

   shell_enable_nullglob

   local prefix

   prefix="${MULLE_BASHFUNCTIONS_LIBEXEC_DIR%/*}"
   for i in "${prefix}"/[0-9]*.[0-9]*.[0-9]*
   do
      if [ -d "${i}" ]
      then
         basename -- "${i}"
         found="yes"
      fi
   done

   if [ -z "${found}" ]
   then
      printf "${MULLE_BASHFUNCTIONS_VERSION}\n"
   fi
}


r_all_library_paths()
{
   log_entry "r_all_library_paths" "$@"

   local paths

   local library
   local name

   shell_enable_nullglob
   for library in "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}"/mulle-*.sh
   do
      name="`basename -- "${library}"`"
      case "${name}" in
         mulle-bash*.sh|mulle-boot.sh)
         ;;

         *)
            if [ -z "${paths}" ]
            then
               paths="${library}"
            else
               paths="${paths}"$'\n'"${library}"
            fi
         ;;
      esac
   done
   shell_disable_nullglob
   RVAL="${paths}"
}


r_library_name()
{
   log_entry "r_library_name" "$@"

   RVAL="${1##*/}"
   RVAL="${RVAL#mulle-}"
   RVAL="${RVAL%.sh}"
}


list_libraries()
{
   log_entry "list_libraries" "$@"

   local paths

   r_all_library_paths
   paths="${RVAL}"

   local library

   IFS=$'\n'
   for library in ${paths}
   do
      r_library_name "${library}"
      printf "${RVAL}\n"
   done
   IFS="${DEFAULT_IFS}"
}


parse_library()
{
   log_entry "parse_library" "$@"

   local library="$1"

   local line
   local comment
   local sep
   local color1="${C_RESET_BOLD}"
   local color2="${C_RESET}"

   IFS=$'\n'
   while read -r line
   do
      #
      # special commands RESET,NOCOLOR,PRE,COLOR only work _well_ in the
      # TITLE INTRO block
      #
      case "${line}" in
         \#\ RESET)
            comment=""
            sep=""
         ;;

         \#\ NOCOLOR)
            color1=""
            color2=""
         ;;

         \#\ PRE)
            comment="${comment}${C_SPECIAL_BLUE}"
         ;;

         \#\ \/PRE)
            comment="${comment}${C_RESET}${C_FAINT}"
         ;;

         \#\ COLOR)
            color1="${C_RESET_BOLD}"
            color2="${C_RESET}"
         ;;

         \#\ TITLE*)
            printf "${C_INFO}${line#\#\ TITLE\ }\n${C_RESET}"
            printf "${C_FAINT}%b${C_RESET}\n\n" "${comment%%$'\n'}"
         ;;

         \#\ SUBTITLE*)
            printf "${C_VERBOSE}${line#\#\ SUBTITLE\ }\n${C_RESET}"
            printf "${C_FAINT}%b${C_RESET}\n\n" "${comment%%$'\n'}"
         ;;

         \#)
            if [ ! -z "${sep}" ]
            then
               comment="${comment}${sep}"
            fi
         ;;

         \#*)
            line="${line##\#\ }"
            if [ ! -z "${sep}" ]
            then
               comment="${comment}${sep}${line}"
               sep=${color2}$'\n'
            else
               if [ ! -z "${line}" ]
               then
                  comment="${comment}${sep}${line}"
                  sep=$'\n'
               fi
            fi
         ;;

         function\ *\(\)*|alias\ *)
            printf "%b\n\n" "${comment%%$'\n'}"
         ;;

         *)
            comment=""
            sep="${color1}"
         ;;
      esac
   done < "${library}"
   IFS="${DEFAULT_IFS}"
}


list_library_functions()
{
   log_entry "list_library_functions" "$@"

   local library="$1"
   local namesonly="$2"

   if [ ! -z "${namesonly}" ]
   then
      sed -n 's/^\([a-z0-9A-Z:][a-z0-9A-Z:_]*\)().*/   \1/p' "${library}" | sort
   else
      parse_library "${library}"
   fi
}


list_functions()
{
   log_entry "list_functions" "$@"

   local library="$1"
   local namesonly="$2"

   if [ -z "${library}" ]
   then
      local paths

      r_all_library_paths
      paths="${RVAL}"

      local sep

      IFS=$'\n'
      for library in ${paths}
      do
         r_library_name "${library}"
         log_info "${sep}${RVAL}:"
         list_library_functions "${library}" "${namesonly}"
         sep=$'\n'
      done
   else
      library="${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-$1.sh"
      if [ -f "${library}" ]
      then
         list_library_functions "${library}" "${namesonly}"
      else
         fail "Library \"$1\" not found"
      fi
   fi
}


new_function()
{
   local name="${1:-my-script}"
   local prefix="${2:-NO}"

   include "case"

   local upcase_identifier

   r_smart_upcase_identifier "${name}"
   upcase_identifier="${RVAL}"

   local downcase_identifier

   r_smart_downcase_identifier "${name}"
   downcase_identifier="${RVAL}"

   case "${prefix}" in
      'YES')
         prefix="${prefix}"
      ;;

      'NO')
         prefix=""
      ;;

      *)
      ;;
   esac

   local EOF_string="EOF"

   cat <<EOF
#! /usr/bin/env mulle-bash
#! MULLE_BASHFUNCTIONS_VERSION=${MULLE_BASHFUNCTIONS_VERSION}
# shellcheck shell=bash
#
#
#  ${name}.sh
#
#  Copyright (c) `date +%Y` ${MULLE_USERNAME}
#  All rights reserved.
#
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#
#  Redistributions of source code must retain the above copyright notice, this
#  list of conditions and the following disclaimer.
#
#  Redistributions in binary form must reproduce the above copyright notice,
#  this list of conditions and the following disclaimer in the documentation
#  and/or other materials provided with the distribution.
#
#  Neither the name of ${ORGANIZATION:-<ORGANIZATION>} nor the names of its contributors
#  may be used to endorse or promote products derived from this software
#  without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.
#

[ "\${TRACE}" = 'YES' -o "\${${upcase_identifier}_TRACE}" = 'YES' ] \
&& set -x  \
&& : "\$0" "\$@"

### >> START OF mulle-boot.sh >>
### << END OF mulle-boot.sh <<

#
# Versioning of this script
#
MULLE_EXECUTABLE_VERSION="0.0.0"


### >> START OF mulle-bashfunctions-embed.sh >>
### << END OF mulle-bashfunctions-embed.sh <<

${prefix}print_flags()
{
   echo "   -f    : force operation"

   ##
   ## ADD YOUR FLAGS DESCRIPTIONS HERE
   ##

   options_technical_flags_usage \
                "         : "
}


${prefix}usage()
{
   [ \$# -ne 0 ] && log_error "\$*"


   cat <<EOF >&2
Usage:
   ${name} [flags]

   ##
   ## ADD YOUR USAGE DESCRIPTION HERE
   ##

Flags:
${EOF_string}
   ${prefix}print_flags | LC_ALL=C sort >&2

   exit 1
}


${prefix}main()
{
   #
   # simple option/flag handling
   #
   local OPTION_VALUE

   while [ \$# -ne 0 ]
   do
      if options_technical_flags "\$1"
      then
         shift
         continue
      fi

      case "\$1" in
         -f|--force)
            MULLE_FLAG_MAGNUM_FORCE='YES'
         ;;

         -h*|--help|help)
            ${prefix}usage
         ;;

         --value)
            [ \$# -eq 1 ] && ${prefix}usage "missing argument to \$1"
            shift

            OPTION_VALUE="\$1"
         ;;

         --version)
            printf "%s\n" "\${MULLE_EXECUTABLE_VERSION}"
            exit 0
         ;;


         ##
         ## ADD YOUR FLAGS HERE
         ##

         -*)
            ${prefix}usage "Unknown flag \"\$1\""
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "\${MULLE_TRACE}" && set -x

   ##
   ## ADD YOUR CODE HERE
   ##
   log_info "Does nothing, but will soon"
}

${prefix}main "\$@"
EOF
}


man_library_function()
{
   log_entry "man_library_function" "$@"

   local library="$1"
   local identifier="$2"

   local text
   local line

   while IFS=$'\n' read -r line
   do
      case "${line}" in
         '#'*)
            line="${line#\#}"
            line="${line#\ }"
            text="${text}${sep}${line}"
            sep=$'\n'
            continue
         ;;

         ${identifier}\(\)|function\ ${identifier}\(\))
            sed -e 's/^# //' <<< "${text}"
            return 0
         ;;

         *)
            text=
            sep=
         ;;
      esac
   done < <( cat "${library}" )

   return 1
}


man_function()
{
   log_entry "man_function" "$@"

   [ $# -eq 0 ] && usage "${MULLE_EXECUTABLE_FAIL_PREFIX}: Missing name"
   [ $# -gt 1 ] && shift && usage "${MULLE_EXECUTABLE_FAIL_PREFIX}: Superflous parameter \"$*\""

   local name="$1"

   local paths

   r_all_library_paths
   paths="${RVAL}"

   local identifier

   r_lowercase "${name}"
   r_identifier "${RVAL}"
   identifier="${RVAL}"

   local library

   IFS=$'\n'
   for library in ${paths}
   do
      if man_library_function "${library}" "${identifier}"
      then
         IFS="${DEFAULT_IFS}"
         return 0
      fi
   done

   # search for transposed bits
   local prefix

   prefix="${identifier:0:2}"
   case "${prefix}" in
      'r_'|'g_')
         identifier="${identifier:2}"
      ;;

      *)
         prefix=""
      ;;
   esac

   #
   # cut identifier into pieces and multiply it out
   #
   # A B C 012
   # A C B 021
   # B A C 102
   # B C A 120
   # C A B 201
   # C B A 210
   #
   local n
   local piece
   local loops

   declare -a pieces

   IFS="_"
   n=0
   loops=1
   for piece in ${identifier}
   do
      pieces[$n]="${piece}"
      n=$(( n + 1 ))
      loops=$(( loops * n ))
   done

   if [ $n -lt 5 ]
   then
      local tmp
      local i
      local next
      local flip

      for prefix in "" "r_" "g_"
      do
         i=0
         flip=0
         while [ $i -lt $loops ]
         do
            j=0
            identifier=""
            while [ $j -lt $n ]
            do
               r_concat "${identifier}" "${pieces[$j]}" "_"
               identifier="${RVAL}"
               j=$(( j + 1 ))
            done

            IFS=$'\n'
            for library in ${paths}
            do
               if man_library_function "${library}" "${prefix}${identifier}"
               then
                  return 0
               fi
            done

            if [ $n -gt 1 ]
            then
               next=$(( (flip + 1) % n ))
               if [ $next -eq 0 ]
               then
                  flip=0
                  next=1
               fi

               tmp="${pieces[$flip]}"
               pieces[$flip]="${pieces[$next]}"
               pieces[$next]="${tmp}"
               flip=$next
            fi
            i=$(( i + 1 ))
         done
      done
   fi

   IFS="${DEFAULT_IFS}"
   log_error "Function ${C_RESET_BOLD}${name}${C_ERROR} is unknown."
}


r_parse_functionname()
{
   local line="$1"

   RVAL="${line%#*}"
   RVAL="${RVAL#"${RVAL%%[![:space:]]*}"}"
   RVAL="${RVAL#function}"
   RVAL="${RVAL#"${RVAL%%[![:space:]]*}"}"
   RVAL="${RVAL%()}"
   RVAL="${RVAL%"${RVAL##*[![:space:]]}"}" # remove tail space
   RVAL="${RVAL#"${RVAL%%[![:space:]]*}"}" # remove head space
}


print_apropos_text()
{
   local text="$1"
   local line="$2"
   local isep="$3"

   r_parse_functionname "${line}"
   if [ "${text#${RVAL}}" = "${text}" ]
   then
      text="`sed -e 's/^/   /' <<< "${text}" `"
      printf "%s%s\n\n%s\n" "${isep}" "${RVAL}" "${text}"
   else
      printf "%s%s\n" "${isep}" "${text}"
   fi
}


r_apropos_library_function()
{
   log_entry "r_apropos_library_function" "$@"

   local library="$1"
   local search="$2"
   local options="$3"
   local isep="$4"

   local text
   local line
   local sep
   local space

   space=""
   sep="${space}"

   # TODO: might optionally also search preceeding text
   #       (see man: how to capture it)
   while IFS=$'\n' read -r line
   do
      case "${line}" in
         '#'*)
            line="${line#\#}"
            line="${line#\ }"
            if [ ! -z "${text}" -o ! -z "${line}" ]
            then
               text="${text}${sep}${line}"
               sep=$'\n'"${space}"
            fi
            continue
         ;;

         *${search}*\(\))
            print_apropos_text "${text}" "${line}"
            isep=$'\n'
            text=
            sep="${space}"
         ;;

         *\(\)*)
            case ",${options}," in
               *',no-text,'*)
               ;;

               *)
                  if grep -E "${search}" <<< "${text}" > /dev/null
                  then
                     print_apropos_text "${text}" "${line}"
                     isep=$'\n'
                  fi
               ;;
            esac
            text=
            sep="${space}"
         ;;

         *)
            text=
            sep="${space}"
         ;;
      esac
   done < <( cat "${library}" )

   RVAL="${isep}"
}


apropos_function()
{
   log_entry "apropos_function" "$@"

   local options

   while [ $# -ne 0 ]
   do
      case "$1" in
         -i)
            r_comma_concat "${options}" "identifier"
            options="${RVAL}"
            shift
            continue
         ;;

         --no-text)
            r_comma_concat "${options}" "no-text"
            options="${RVAL}"
            shift
            continue
         ;;
      esac
      break
   done

   [ $# -eq 0 ] && usage "${MULLE_EXECUTABLE_FAIL_PREFIX}: Missing name"
   [ $# -gt 1 ] && shift && usage "${MULLE_EXECUTABLE_FAIL_PREFIX}: Superflous parameter \"$*\""

   local name="$1"

   local paths

   r_all_library_paths
   paths="${RVAL}"

   local search

   search="${name}"
   case ",${options}," in
      *',identifier,'*)
         r_lowercase "${name}"
         r_identifier "${RVAL}"
         search="${RVAL}"
      ;;
   esac

   local library
   local isep

   IFS=$'\n'
   for library in ${paths}
   do
      if r_apropos_library_function "${library}" "${search}" "${options}" "${isep}"
      then
         isep="${RVAL}"
      fi
   done
   IFS="${DEFAULT_IFS}"
}


MINIMAL_HEAD_MARKER='### >> START OF mulle-bashfunctions-minimal-embed.sh >>'
MINIMAL_FOOT_MARKER='### << END OF mulle-bashfunctions-minimal-embed.sh <<'

DEFAULT_HEAD_MARKER='### >> START OF mulle-bashfunctions-embed.sh >>'
DEFAULT_FOOT_MARKER='### << END OF mulle-bashfunctions-embed.sh <<'

ALL_HEAD_MARKER='### >> START OF mulle-bashfunctions-all-embed.sh >>'
ALL_FOOT_MARKER='### << END OF mulle-bashfunctions-all-embed.sh <<'

BOOT_HEAD_MARKER='### >> START OF mulle-boot.sh >>'
BOOT_FOOT_MARKER='### << END OF mulle-boot.sh <<'


mulle_bashfunctions_embed_usage()
{
   [ $# -ne 0 ] && log_error "$*"

   cat <<EOF >&2
Usage:
   mulle-bashfunctions embed

   This lazy script just reads from stdio and outputs to stdout.

   Inserts or updates the mulle-boot.sh code between these two markers:

   ${BOOT_HEAD_MARKER}
   ${BOOT_FOOT_MARKER}

   If there is a \`#!/usr/bin/env mulle-bash\` line on top, it will be replaced
   by \`bin/sh\`. If these markers are missing the embed can not work.
   The place should be at the very, very top (below the \${TRACE} = 'YES', if
   that exists.

   Inserts or updates the mulle-bashfunctions-embed.sh code between these two
   markers for minimal:

   ${MINIMAL_HEAD_MARKER}
   ${MINIMAL_FOOT_MARKER}

   default:

   ${DEFAULT_HEAD_MARKER}
   ${DEFAULT_FOOT_MARKER}

   all:

   ${ALL_HEAD_MARKER}
   ${ALL_FOOT_MARKER}

   If these markers are missing in your script the embed can not work. To
   change the chose mulle-bashfunctions edit the markers in your script.
   A convenient place to place these marker sis right after the booter
   (below MULLE_EXECUTABLE_VERSION if that line exists).

   Use mulle-bashfunctions boot-embed/boot-extract, if you just want to add
   or remove the boot code.

EOF
   exit 1
}


mulle_boot_embed()
{
   while [ $# -ne 0 ]
   do
      case "$1" in
         *)
            mulle_bashfunctions_embed_usage
         ;;
      esac
   done

   local line
   local found='NO'

   # initial state, searching for start
   while IFS=$'\n' read -r line
   do
      if [ "${line}" = "#! /usr/bin/env mulle-bash" ]
      then
         printf "%s\n" "#! /bin/sh"
         continue
      fi

      if [ "${line}" = "${BOOT_HEAD_MARKER}" ]
      then
         found='YES'
         break
      fi
      printf "%s\n" "${line}"
   done

   if [ "${found}" = 'NO' ]
   then
      mulle_bashfunctions_embed_usage "Add boot markers to your source, before running embed"
   fi

   # start found and consumed now put in embed.sh
   cat "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-boot.sh" || exit 1

   if [ "${found}" = 'YES' ]
   then
      # now search for end
      while IFS=$'\n' read -r line
      do
         if [ "${line}" = "${BOOT_FOOT_MARKER}" ]
         then
            break
         fi
      done
   fi

   # output rest
   while IFS=$'\n' read -r line
   do
      printf "%s\n" "${line}"
   done
}


mulle_bashfunctions_embed()
{
   local filename

   while [ $# -ne 0 ]
   do
      case "$1" in
         *)
            exit 1
         ;;
      esac
   done

   local line
   local found

   # initial state, searching for start
   while IFS=$'\n' read -r line
   do
      if [ "${line}" = "${MINIMAL_HEAD_MARKER}" -o \
           "${line}" = "${DEFAULT_HEAD_MARKER}" -o \
           "${line}" = "${ALL_HEAD_MARKER}" ]
      then
         local found="${line}"
         break
      fi
      printf "%s\n" "${line}"
   done

   if [ -z "${found}" ]
   then
      mulle_bashfunctions_embed_usage "Add embed markers to your source, before running embed"
   fi

   case "${found}" in
      *-all-*)
         log_verbose "Determined ${C_MAGENTA}${C_BOLD}all${C_VERBOSE} embedding"
         filename="mulle-bashfunctions-all-embed.sh"
      ;;

      *-minimal-*)
         log_verbose "Determined ${C_MAGENTA}${C_BOLD}minimal${C_VERBOSE} embedding"
         filename="mulle-bashfunctions-minimal-embed.sh"
      ;;

      *)
         log_verbose "Defaulting to standard embedding"
         filename="mulle-bashfunctions-embed.sh"
      ;;
   esac

   # start found and consumed now put in embed.sh
   cat "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/${filename}" || exit 1

   # now search for end
   while IFS=$'\n' read -r line
   do
      if [ "${line}" = "${MINIMAL_FOOT_MARKER}" -o \
           "${line}" = "${DEFAULT_FOOT_MARKER}" -o \
           "${line}" = "${ALL_FOOT_MARKER}" ]
      then
         break
      fi
   done

   # output rest
   while IFS=$'\n' read -r line
   do
      printf "%s\n" "${line}"
   done
}


mulle_bashfunctions_extract_usage()
{
   [ $# -ne 0 ] && log_error "$*"

   cat <<EOF >&2
Usage:
   mulle-bashfunctions extract

   Undo what embed did. See embed for more information.

EOF
   exit 1
}


mulle_boot_extract()
{
   while [ $# -ne 0 ]
   do
      case "$1" in
         *)
            mulle_bashfunctions_extract_usage
         ;;
      esac
   done

   local line
   local found='NO'

   # initial state, searching for start
   while IFS=$'\n' read -r line
   do
      if [ "${line}" = "#! /bin/sh"  ]
      then
         printf "%s\n" "#! /usr/bin/env mulle-bash"
         continue
      fi

      printf "%s\n" "${line}"

      if [ "${line}" = "${BOOT_HEAD_MARKER}" ]
      then
         found='YES'
         break
      fi
   done

   if [ "${found}" = 'YES' ]
   then
      # now search for end
      while IFS=$'\n' read -r line
      do
         if [ "${line}" = "${BOOT_FOOT_MARKER}" ]
         then
            printf "%s\n" "${line}"
            break
         fi
      done
   fi

   # output rest
   while IFS=$'\n' read -r line
   do
      printf "%s\n" "${line}"
   done
}


mulle_bashfunctions_extract()
{
   while [ $# -ne 0 ]
   do
      case "$1" in
         *)
            exit 1 # dont do it twice
         ;;
      esac
   done

   local line
   local found

   # initial state, searching for start

   while IFS=$'\n' read -r line
   do
      printf "%s\n" "${line}"

      if [ "${line}" = "${MINIMAL_HEAD_MARKER}" -o \
           "${line}" = "${DEFAULT_HEAD_MARKER}" -o \
           "${line}" = "${ALL_HEAD_MARKER}" ]
      then
         local found='YES'
         break
      fi
   done

   # now search for end
   while IFS=$'\n' read -r line
   do
      if [ "${line}" = "${MINIMAL_FOOT_MARKER}" -o \
           "${line}" = "${DEFAULT_FOOT_MARKER}" -o \
           "${line}" = "${ALL_FOOT_MARKER}" ]
      then
         printf "%s\n" "${line}"
         break
      fi
   done

   # output rest
   while IFS=$'\n' read -r line
   do
      printf "%s\n" "${line}"
   done
}



main()
{
   #
   # simple option handling
   #
   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -h|--help)
            usage
         ;;

         -f|--force)
            MULLE_FLAG_MAGNUM_FORCE='YES'
         ;;

         --version)
            printf "%s\n" "${MULLE_BASHFUNCTIONS_VERSION}"
            exit 0
         ;;

         -*)
            log_error "${MULLE_EXECUTABLE_FAIL_PREFIX}: Unknown option \"$1\""
            usage
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}" && set -x

   local cmd

   cmd="${1:-libexec-dir}"
   [ $# -eq 0 ] || shift

   MULLE_EXECUTABLE_FAIL_PREFIX="${MULLE_EXECUTABLE_NAME} ${cmd}"

   case "${cmd}" in
      'help')
         usage
      ;;

      'apropos')
         apropos_function "$@" || exit 1
      ;;

      'env')
         echo "\
MULLE_BASHFUNCTIONS_LIBEXEC_DIR=\"${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}\"
MULLE_USERNAME=\"${MULLE_USERNAME}\"
MULLE_HOSTNAME=\"${MULLE_HOSTNAME}\"
MULLE_UNAME=\"${MULLE_UNAME}\""
      ;;

      'embed-boot')
         mulle_boot_embed "$@"
      ;;

      'embed')
         mulle_boot_embed "$@" | mulle_bashfunctions_embed "$@"
      ;;

      'extract-boot')
         mulle_boot_extract "$@"
      ;;

      'extract'|'unembed')
         mulle_boot_extract "$@" | mulle_bashfunctions_extract "$@"
      ;;

      'functions')
         list_functions "$@" || exit 1
      ;;

      globals)
         if [ $# -ne 0 ]
         then
            declare -p | sed 's/^declare -[^ ]*[ ]*//p' | sort | sort -u
         else
            declare -p | sed -n 's/^declare -[^ ]* \(MULLE_[^=]*\)=\(.*\)$/\1=\2/p' | sort | sort -u
         fi
      ;;

      'hostname')
         printf "%s\n" "${MULLE_HOSTNAME}"
      ;;

      'init'|'script')
         fail "Use mulle-sde add --extension \"mulle-nat/file.sh\" instead"
      ;;

      'libexec-dir')
         printf "%s\n" "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}"
      ;;

      'libraries')
         list_libraries "$@" || exit 1
      ;;

      'load')
         local format

         [ $# -ne 0 ] && format="-$1"

         echo "\
MULLE_BASHFUNCTIONS_LIBEXEC_DIR=\"${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}\" ;
export MULLE_BASHFUNCTIONS_LIBEXEC_DIR ;
MULLE_USERNAME=\"${MULLE_USERNAME}\" ;
export MULLE_USERNAME ;
MULLE_HOSTNAME=\"${MULLE_HOSTNAME}\" ;
export MULLE_HOSTNAME ;
MULLE_UNAME=\"${MULLE_UNAME}\" ;
export MULLE_UNAME ;
. \"${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions${format}.sh\"
"
      ;;

      'common-unames')
         cat <<EOF
android
darwin
dragonfly
freebsd
hpux
linux
mingw
msys
netbsd
openbsd
sunos
windows
EOF
      ;;

      'man')
         man_function "$@" || exit 1
      ;;

      'new')
         new_function "$@" || exit 1
      ;;

      'ncores')
         include "path"
         include "file"
         include "parallel"

         r_get_core_count
         printf "%s\n" "${RVAL}"
      ;;

      'path')
         local format

         [ $# -ne 0 ] && format="-$1"

         echo "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions${format}.sh"
      ;;

      # useful for accessing a single function from the library
      'eval')
         include "path"
         include "file"
         include "case"
         include "parallel"
         include "sort"
         include "url"
         include "version"

         "$@"
         return $?
      ;;

      # useful for accessing a r function from the library
      'r-eval')
         include "path"
         include "file"
         include "case"
         include "parallel"
         include "sort"
         include "url"
         include "version"

         "$@" || return $?
         printf "%s\n" "${RVAL}"
         return 0
      ;;

      'shell')
         printf "%s\n" `ps -h -o cmd -p $$ | awk '{ print $1 }'`
      ;;

      'uname')
         printf "%s\n" "${MULLE_UNAME}"
      ;;

      'username')
         printf "%s\n" "${MULLE_USERNAME}"
      ;;

      'uuid')
         include "path"
         include "file"

         r_uuidgen
         printf "%s\n" "${RVAL}"
      ;;

      'version')
         printf "%s\n" "${MULLE_BASHFUNCTIONS_VERSION}"
      ;;

      'versions')
         list_versions "$@" || exit 1
      ;;

      *)
         usage "${MULLE_EXECUTABLE_FAIL_PREFIX}: Unknown command \"${cmd}\""
      ;;
   esac
}


_init()
{
   if [ ${ZSH_VERSION+x} ]
   then
     setopt sh_word_split
   fi

   #
   # commands with minimal trap setup. libexec-dir is the most common call
   # and will exit quickly
   #
   if [ $# -eq 1 ]
   then
      case "$1" in
         libexec-dir|library-path)
            printf "%s\n" "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}"
            exit 0
         ;;

         version)
            printf "%s\n" "${MULLE_BASHFUNCTIONS_VERSION}"
            exit 0
         ;;
      esac
   fi

   # shellcheck source=src/mulle-logging.sh
   include "logging" || _internal_fail "include mulle-version.sh fail"
   # shellcheck source=src/mulle-version.sh
   include "version" || _internal_fail "include mulle-version.sh fail"

   shell_enable_pipefail
   shell_enable_extglob
}


_init "$@"
main "$@"

