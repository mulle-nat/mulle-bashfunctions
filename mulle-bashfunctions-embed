#! /bin/sh

[ "${TRACE}" = 'YES' -o "${MULLE_BASHFUNCTIONS_EMBED_TRACE}" = 'YES' ] && set -x && : "$0" "$@"


####
#
# Prelude to be placed at top of each script. Rerun this script either in
# bash or zsh, if not already running in either (which can happen!)
# Allows script to run on systems that either have bash (linux) or
# zsh (macOS) only by default.

if [ "$1" != --no-auto-shell ]
then
   if [ -z "${BASH_VERSION}" -a -z "${ZSH_VERSION}" ]
   then
      exe_shell="`command -v "bash" `"
      exe_shell="${exe_shell:-`command -v "zsh" `}"

      script="$0"

      #
      # Quote incoming arguments for shell expansion
      #
      args=""
      for arg in "$@"
      do
         # True bourne sh doesn't know ${a//b/c} and <<<
         case "${arg}" in
            *\'*)
               # Use cat instead of echo to avoid possible echo -n
               # problems. Escape single quotes in string.
               arg="`cat <<EOF | sed -e s/\'/\'\\\"\'\\\"\'/g
${arg}
EOF
`"
            ;;
         esac
         if [ -z "${args}" ]
         then
            args="'${arg}'"
         else
            args="${args} '${arg}'"
         fi
      done

      #
      # bash/zsh will use arg after -c <arg> as $0, convenient!
      #

      exec "${exe_shell:-bash}" -c ". ${script} --no-auto-shell ${args}" "${script}"
   fi
   if [ ! -z "${BASH_VERSION}" ]
   then
      set +o posix
   fi
else
   shift    # get rid of --no-auto-shell
fi


#
# Main script to follow, runs now either in zsh or bash
#
####



MULLE_EXECUTABLE_VERSION="0.0.1"


print_flags()
{
   options_technical_flags_usage \
           "      : "
}


HEAD_MARKER='### >> START OF mulle-bashfunctions-embed.sh >>'
FOOT_MARKER='### << END OF mulle-bashfunctions-embed.sh <<'

usage()
{
   [ $# -ne 0 ] && log_error "$*"


   cat <<EOF >&2
Usage:
   mulle-bashfunctions-embed [flags]

   Insert or update the mulle-bashfunctions-embed.sh code between these two
   markers:

   ${HEAD_MARKER}
   ${FOOT_MARKER}

   This lazy script just reads from stdio and outputs to stdout.

Flags:
EOF
   print_flags | LC_ALL=C sort >&2

   exit 1
}


main()
{
   local MULLE_FLAG_MAGNUM_FORCE='NO'

   # technical flags
   local MULLE_TRACE
   local MULLE_FLAG_EXEKUTOR_DRY_RUN='NO'
   local MULLE_FLAG_LOG_LOCAL='NO'
   local MULLE_FLAG_LOG_DEBUG='NO'
   local MULLE_FLAG_LOG_EXEKUTOR='NO'
   local MULLE_FLAG_LOG_FLUFF='NO'
   local MULLE_FLAG_LOG_SCRIPTS='NO'
   local MULLE_FLAG_LOG_SETTINGS='NO'
   local MULLE_FLAG_LOG_VERBOSE='NO'
   local MULLE_FLAG_LOG_MERGE='NO'
   local MULLE_TRACE_POSTPONE='NO'

   #
   # simple option/flag handling
   #
   local OPTION_VALUE

   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -h*|--help|help)
            usage
         ;;

         --version)
            printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
            exit 0
         ;;

         -*)
            usage "Unknown flag \"$1\""
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}" && set -x


   local line

   # initial state, searching for start
   IFS=$'\n'
   while read -r line
   do
      if [ "${line}" = "${HEAD_MARKER}" ]
      then
         break
      fi
      printf "%s\n" "${line}"
   done

   # start found and consumed now put in embed.sh
   cat "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions-embed.sh" || exit 1

   # now search for end
   while read -r line
   do
      if [ "${line}" = "${FOOT_MARKER}" ]
      then
         break
      fi
   done

   # output rest
   while read -r line
   do
      printf "%s\n" "${line}"
   done
}


########
###
### INIT - You usually won't edit code below
###

#
# set MULLE_EXECUTABLE here unless set already
#
MULLE_EXECUTABLE="${MULLE_EXECUTABLE:-${BASH_SOURCE[0]:-${(%):-%x}}}"

_init()
{
   #
   # minimal setup exit
   #
   if [ "$1" = "version" ]
   then
      printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
      exit 0
   fi
   #
   # leading backslash ? looks like we're getting called from
   # mingw via a .BAT or so
   #
   case "$PATH" in
      '\\'*)
         PATH="${PATH//\\/\/}"
      ;;
   esac

   if [ -z "${MULLE_BASHGLOBAL_SH}" ]
   then
      if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
      then
         MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions-env libexec-dir 2> /dev/null`"
         if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
         then
            if [ -z "`command -v "${executablepath}"`" ]
            then
               echo "Fatal Error: Could not find mulle-bashfunctions-env in PATH ($PATH) - mulle-bashfunctions not installed ?" >&2
            else
               echo "Fatal Error: Could not find libexec of mulle-bashfunctions-env ($PWD)" >&2
            fi
            exit 1
         fi
      fi

      . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" ||
         fail "failed to load bashfunctions from ${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}"
   fi
   
   #  set -e # more pain then gain in the end
   #  set -u # doesn't work with my style

   shell_enable_pipefail
   shell_enable_extglob

   call_main "${MULLE_BASHFUNCTIONS_EMBED_FLAGS}" "$@"
}

##
## Paste contents of mulle-bashfunctions-env-embed.sh here, if you don't 
## want the dependency on mulle-bashfunctions.
##

### >> START OF mulle-bashfunctions-embed.sh >>
### << END OF mulle-bashfunctions-embed.sh <<

_init "$@" # will call main indirectly via call_main

###
### INIT
###
########
