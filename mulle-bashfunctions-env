#! /usr/bin/env bash
#
#   Copyright (c) 2015-2017 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
[ "${TRACE}" = 'YES' ] && set -x && : "$0" "$@"

MULLE_BASHFUNCTIONS_VERSION="1.12.0"


usage()
{
   [ ! -z "$*" ] && echo "error: $*" >&2

   cat <<EOF
Usage:
   ${MULLE_EXECUTABLE_NAME} [command]

   Locate bashfunctions install path for desired version.

Commands:
   init <script>           : create an empty script for mulle-bashfunctions
   libexec-dir [version]   : print best libexec filepath for desired version
   list                    : list installed versions
   uname                   : show system short name
   version                 : print most recent version
EOF

   exit 1
}



list_libraries()
{
   for i in "${MULLE_LIBEXECBASE_PATH}"/[0-9]*.[0-9]*.[0-9]*
   do
      if [ -d "${i}" ]
      then
         basename -- "${i}"
      fi
   done
}


#
# Usually one requests the library by major.minor number
# and one gets that with the latest patch
#
_find_library_path()
{
   local version="$1"

   local major
   local minor
   local patch
   r_get_version_major "${version}"
   major="${RVAL}"
   r_get_version_minor "${version}"
   minor="${RVAL}"
   r_get_version_patch "${version}"
   patch="${RVAL}"

   local majorpattern
   local minorpattern
   local patchpattern

   majorpattern="${major:-[0-9]*}"
   minorpattern="${minor:-[0-9]*}"
   patchpattern="${patch:-[0-9]*}"

   local prefix
   local _directory

   _fast_dirname "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}"
   prefix="${_directory}"

   ls -1d "${prefix}"/${majorpattern}.${minorpattern}.${patchpattern} 2> /dev/null | sort -nr | head -1
}


_find_local_library_path()
{
   local version="$1"

   if ! is_compatible_version "${MULLE_BASHFUNCTIONS_VERSION}" "${version}"
   then
      return 1
   fi
   echo "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}"
}


find_library_path()
{
   case "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" in
      */src)
         if _find_local_library_path "$@"
         then
            return
         fi
      ;;
   esac

   _find_library_path "$@"
}


create_script()
{
   local script="$1"

   local o='<|'
   local c='|>'

   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-string.sh" || exit 1
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-exekutor.sh" || exit 1

   local nowdate
   local nowtime
   local nowyear

   nowdate="`date "+%d.%m.%Y"`"
   nowtime="`date "+%H:%M:%S"`"
   nowyear="`date "+%Y"`"

   local cmdline
   local scriptname

   r_basename "${script}"
   scriptname="${RVAL}"

   r_escaped_sed_replacement "${AUTHOR:-${USER:-USER}}"
   cmdline="-e 's/${o}AUTHOR${c}/${RVAL}/g'"
   r_escaped_sed_replacement "${nowdate}"
   cmdline="${cmdline} -e 's/${o}DATE${c}/${RVAL}/g'"
   r_escaped_sed_replacement "${ORGANIZATION:-ORGANIZATION}"
   cmdline="${cmdline} -e 's/${o}ORGANIZATION${c}/${RVAL}/g'"
   r_escaped_sed_replacement "${nowtime}"
   cmdline="${cmdline} -e 's/${o}TIME${c}/${RVAL}/g'"
   r_escaped_sed_replacement "${USER:-USER}"
   cmdline="${cmdline} -e 's/${o}USER${c}/${RVAL}/g'"
   r_escaped_sed_replacement "${nowyear}"
   cmdline="${cmdline} -e 's/${o}YEAR${c}/${RVAL}/g'"
   r_escaped_sed_replacement "${scriptname}"
   cmdline="${cmdline} -e 's/${o}ONESHOT_NAME${c}/${RVAL}/g'"

   redirect_eval_exekutor "${script}" sed "${cmdline}" \
             "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/../share/ONESHOT_NAME" &&
   chmod 755 "${script}"
}


main()
{
   #
   # simple option handling
   #
   while [ $# -ne 0 ]
   do
      case "$1" in
         -h|--help)
            usage
         ;;

         --version)
            echo "${MULLE_BASHFUNCTIONS_VERSION}"
            exit 0
         ;;

         -v|-vv|-vvv)
         ;;

         -ld|-ls|-lx)
         ;;

         -t)
            set -x
         ;;

         -*)
            log_error "${MULLE_EXECUTABLE_FAIL_PREFIX}: Unknown option \"$1\""
            usage
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   local cmd

   cmd="${1:-libexec-dir}"

   MULLE_EXECUTABLE_FAIL_PREFIX="${MULLE_EXECUTABLE_NAME} ${cmd}"
   [ $# -eq 0 ] || shift

   case "${cmd}" in
      help)
         usage
      ;;

      hostname)
         echo "${MULLE_HOSTNAME}"
      ;;

      init|script)
         if [ $# -ne 1 ]
         then
            usage "script requires one argument (only)"
         fi

         create_script "$1"
      ;;


      libexec-dir|library-path)
         if [ $# -eq 0 ]
         then
            echo "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}"
            return 0
         fi

         find_library_path "$@"
      ;;

      list)
         list_libraries "$@" || exit 1
      ;;

      uname)
         echo "${MULLE_UNAME}"
      ;;

      version)
         echo "${MULLE_BASHFUNCTIONS_VERSION}"
      ;;

      *)
         log_error "${MULLE_EXECUTABLE_FAIL_PREFIX}: Unknown command \"${cmd}\""
         usage
      ;;
   esac
}


#
# Memo: to avoid confusion
#    variables containing a filesystem path to a directory end with _DIR
#    other variables containing a filesystem path end with _FILE
#    variables containing search paths end with _PATH
#

# export into _directory global
_fast_dirname()
{
   local filename="$1"

   local last

   while :
   do
      case "${filename}" in
         /)
            _directory="${filename}"
            return
         ;;

         */)
            filename="${filename%?}"
            continue
         ;;
      esac
      break
   done

   last="${filename##*/}"
   _directory="${filename%${last}}"

   while :
   do
      case "${_directory}" in
         /)
           return
         ;;

         */)
            _directory="${_directory%?}"
         ;;

         *)
            _directory="${_directory:-.}"
            return
         ;;
      esac
   done
}


#
# ####
# #### this is a duplicate of mulle-init
# #### Do not edit this, edit mulle-init and then copy back to here
# ####
#

# result in _linkpath global
_resolve_symlinks()
{
   if _linkpath="`readlink "$1"`"
   then
      case "${_linkpath}" in
         /*)
            _resolve_symlinks "${_linkpath}"
         ;;

         *)
            local _directory

            _fast_dirname "$1"
            _resolve_symlinks "${_directory}/${_linkpath}"
         ;;
      esac
   else
      _linkpath="$1"
   fi
}


#
# ####
# #### this is a duplicate of mulle-init
# #### Do not edit this, edit mulle-init and then copy back to here
# ####
#


# return _libexecdir
#
# executablepath: will be $0
# subdir: will be mulle-bashfunctions/${VERSION}
# matchfile: the file to match agains
#
# Written this way, so it can get reused
#
_get_libexec_dir()
{
   local executablepath="$1"
   local subdir="$2"
   local matchfile="$3"

   local exedirpath
   local prefix

   case "${executablepath}" in
      \.*|/*|~*)
      ;;

      *)
         executablepath="`command -v "${executablepath}"`"
      ;;
   esac

   local _linkpath

   _resolve_symlinks "${executablepath}"
   executablepath="${_linkpath}"

   local _directory

   _fast_dirname "${executablepath}"
   exedirpath="${_directory}"

   _fast_dirname "${exedirpath}"
   prefix="${_directory}"


   # now setup the global variable

   _libexec_dir="${prefix}/libexec/${subdir}"

   if [ ! -f "${_libexec_dir}/${matchfile}" ]
   then
      _libexec_dir="${exedirpath}/src"
   fi

   case "$_libexec_dir" in
      /*|~*)
      ;;

      .)
         _libexec_dir="$PWD"
      ;;

      *)
         _libexec_dir="$PWD/${_libexec_dir}"
      ;;
   esac

   if [ ! -f "${_libexec_dir}/${matchfile}" ]
   then
      unset _libexec_dir
   fi
}


_init()
{
   # nice for tests
   if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
   then
      _get_libexec_dir "$0" \
                        "mulle-bashfunctions/${MULLE_BASHFUNCTIONS_VERSION}" \
                        "mulle-bashfunctions.sh"

      if [ -z "${_libexec_dir}" ]
      then
         echo "$0 fatal Error: Could not find libexec (PWD: $PWD)" >&2
         exit 1
      fi
      MULLE_BASHFUNCTIONS_LIBEXEC_DIR="${_libexec_dir}"
   fi

   #
   # commands with minimal trap setup
   #
   if [ $# -eq 1 ]
   then
      case "${1}" in
         libexec-dir|library-path)
            echo "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}"
            exit 0
         ;;

         version)
            echo "${MULLE_BASHFUNCTIONS_VERSION}"
            exit 0
         ;;
      esac
   fi

   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-logging.sh" || exit 1
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-version.sh" || exit 1
}


#
# leading backslash ? looks like we're getting called from
# mingw via a .BAT or so
#
case "$PATH" in
   '\\'*)
      PATH="${PATH//\\/\/}"
   ;;
esac


_init "$@"

main "$@"
