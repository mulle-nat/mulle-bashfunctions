#! /bin/sh

[ "${TRACE}" = 'YES' ] && set -x && : "$0" "$@"

###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###
MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions libexec-dir`" || exit 1
export MULLE_BASHFUNCTIONS_LIBEXEC_DIR
. "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-boot.sh" || exit 1
. "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" || exit 1
###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###

if [ ${ZSH_VERSION+x} ]
then
   setopt sh_word_split
fi



expect_output()
{
   local output="$1"
   local expected="$2"

   if [ "${output}" != "${expected}" ]
   then
      echo "Got \"${output}\". Expected: \"${expected}\"" >&2
      stacktrace >&2
      exit 1
   fi
}


# use for lists w/o empty elements
comma_concat()
{
   r_comma_concat "$@"

   [ ! -z "${RVAL}" ] && printf "%s\n" "${RVAL}"
}



test_concat()
{
   local output

# EMPTY STRING
   output="`concat "" "" ','`"
   expect_output "${output}" ""

   output="`concat "," "" ','`"
   expect_output "${output}" ","

# ,
   output="`concat "" "," ','`"
   expect_output "${output}" ","

   output="`concat "," "," ','`"
   expect_output "${output}" ",,,"

# ,, not expected to work
   output="`concat "" ",," ','`"
   expect_output "${output}" ",,"

   output="`concat ",," ",," ','`"
   expect_output "${output}" ",,,,,"

# a
   output="`concat "a" "" ','`"
   expect_output "${output}" "a"

   output="`concat "" "a" ','`"
   expect_output "${output}" "a"

# a,
   output="`concat "a," "" ','`"
   expect_output "${output}" "a,"

   output="`concat "" "a," ','`"
   expect_output "${output}" "a,"

# ,a
   output="`concat ",a" "" ','`"
   expect_output "${output}" ",a"

   output="`concat "" ",a" ','`"
   expect_output "${output}" ",a"

# ,a,
   output="`concat ",a," "" ','`"
   expect_output "${output}" ",a,"

   output="`concat "" ",a," ','`"
   expect_output "${output}" ",a,"


# a b
   output="`concat "a" "b" ','`"
   expect_output "${output}" "a,b"

# a b,
   output="`concat "a" "b," ','`"
   expect_output "${output}" "a,b,"

# a ,b
   output="`concat "a" ",b" ','`"
   expect_output "${output}" "a,,b"

# a ,b,
   output="`concat "a," ",b," ','`"
   expect_output "${output}" "a,,,b,"


# ,a b
   output="`concat ",a" "b" ','`"
   expect_output "${output}" ",a,b"

# ,a b,
   output="`concat ",a" "b," ','`"
   expect_output "${output}" ",a,b,"

# ,a ,b
   output="`concat ",a" ",b" ','`"
   expect_output "${output}" ",a,,b"

# ,a ,b,
   output="`concat ",a," ",b," ','`"
   expect_output "${output}" ",a,,,b,"


# a, b
   output="`concat "a," "b" ','`"
   expect_output "${output}" "a,,b"

# a, b,
   output="`concat "a," "b," ','`"
   expect_output "${output}" "a,,b,"

# a, ,b
   output="`concat "a," ",b" ','`"
   expect_output "${output}" "a,,,b"

# a, ,b,
   output="`concat "a," ",b," ','`"
   expect_output "${output}" "a,,,b,"


# ,a, b
   output="`concat ",a," "b" ','`"
   expect_output "${output}" ",a,,b"

# ,a, b,
   output="`concat ",a," "b," ','`"
   expect_output "${output}" ",a,,b,"

# ,a, ,b
   output="`concat ",a," ",b" ','`"
   expect_output "${output}" ",a,,,b"

# ,a, ,b,
   output="`concat ",a," ",b," ','`"
   expect_output "${output}" ",a,,,b,"
}


test_comma_concat()
{
   local output

# EMPTY STRING
   output="`comma_concat "" ""`"
   expect_output "${output}" ""

   output="`comma_concat "," ""`"
   expect_output "${output}" ""

# ,
   output="`comma_concat "" ","`"
   expect_output "${output}" ""

   output="`comma_concat "," ","`"
   expect_output "${output}" ""

# ,,
   output="`comma_concat "" ",,"`"
   expect_output "${output}" ""

   output="`comma_concat ",," ",,"`"
   expect_output "${output}" ""

# a
   output="`comma_concat "a" ""`"
   expect_output "${output}" "a"

   output="`comma_concat "" "a"`"
   expect_output "${output}" "a"

# a,
   output="`comma_concat "a," ""`"
   expect_output "${output}" "a"

   output="`comma_concat "" "a,"`"
   expect_output "${output}" "a"

# ,a
   output="`comma_concat ",a" ""`"
   expect_output "${output}" "a"

   output="`comma_concat "" ",a"`"
   expect_output "${output}" "a"

# ,a,
   output="`comma_concat ",a," ""`"
   expect_output "${output}" "a"

   output="`comma_concat "" ",a,"`"
   expect_output "${output}" "a"

# a b
   output="`comma_concat "a" "b"`"
   expect_output "${output}" "a,b"

# ,a, ,b,
   output="`comma_concat ",a," ",b,"`"
   expect_output "${output}" "a,b"
}


main()
{
   test_concat
   test_comma_concat

   echo "All tests passed" >&2
}


main "$@"

