#! /bin/sh

[ "${TRACE}" = 'YES' ] && set -x && : "$0" "$@"

###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###
MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions libexec-dir`" || exit 1
export MULLE_BASHFUNCTIONS_LIBEXEC_DIR
. "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-boot.sh" || exit 1
. "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" || exit 1
###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###

if [ ! -z "${ZSH_VERSION}" ]
then
   setopt sh_word_split
fi



expect_output()
{
   local output="$1"
   local expected="$2"

   if [ "${output}" != "${expected}" ]
   then
      echo "Got \"${output}\". Expected: \"${expected}\"" >&2
      stacktrace >&2
      exit 1
   fi
}


fail()
{
   echo "Unexpected failure" >&2
   stacktrace >&2
   exit 1
}


test_filepath_concat()
{
   local output

# EMPTY STRING
   output="`filepath_concat "" "" `"
   expect_output "${output}" ""

   output="`filepath_concat "/" "" `"
   expect_output "${output}" "/"

# /
   output="`filepath_concat "" "/" `"
   expect_output "${output}" "/"

   output="`filepath_concat "/" "/" `"
   expect_output "${output}" "/"

# // not expected to work
   output="`filepath_concat "" "//" `"
   expect_output "${output}" "/"

   output="`filepath_concat "//" "//" `"
   expect_output "${output}" "/"

# a /
   output="`filepath_concat "a"  `"
   expect_output "${output}" "a"

   output="`filepath_concat "/" "a" `"
   expect_output "${output}" "/a"

# a
   output="`filepath_concat "a" "" `"
   expect_output "${output}" "a"

   output="`filepath_concat "" "a" `"
   expect_output "${output}" "a"

# a b
   output="`filepath_concat "a" "b" `"
   expect_output "${output}" "a/b"

# a/
   output="`filepath_concat "a/" "" `"
   expect_output "${output}" "a/"

   output="`filepath_concat "" "a/" `"
   expect_output "${output}" "a/"

# /a
   output="`filepath_concat "/a" "" `"
   expect_output "${output}" "/a"

   output="`filepath_concat "" "/a" `"
   expect_output "${output}" "/a"

# /a/
   output="`filepath_concat "/a/" "" `"
   expect_output "${output}" "/a/"

   output="`filepath_concat "" "/a/" `"
   expect_output "${output}" "/a/"

# //a
   output="`filepath_concat "//a" "" `"
   expect_output "${output}" "/a"

   output="`filepath_concat "" "//a" `"
   expect_output "${output}" "/a"


# a//
   output="`filepath_concat "a//" "" `"
   expect_output "${output}" "a/"

   output="`filepath_concat "" "a//" `"
   expect_output "${output}" "a/"

# a//b
   output="`filepath_concat "a//b" "" `"
   expect_output "${output}" "a/b"

   output="`filepath_concat "" "a//b" `"
   expect_output "${output}" "a/b"

# a b
   output="`filepath_concat "a" "b" `"
   expect_output "${output}" "a/b"

# a b/
   output="`filepath_concat "a" "b/" `"
   expect_output "${output}" "a/b/"

# a /b
   output="`filepath_concat "a" "/b" `"
   expect_output "${output}" "a/b"

# a /b/
   output="`filepath_concat "a/" "/b/" `"
   expect_output "${output}" "a/b/"


# /a b
   output="`filepath_concat "/a" "b" `"
   expect_output "${output}" "/a/b"

# /a b/
   output="`filepath_concat "/a" "b/" `"
   expect_output "${output}" "/a/b/"

# /a /b
   output="`filepath_concat "/a" "/b" `"
   expect_output "${output}" "/a/b"

# /a /b/
   output="`filepath_concat "/a/" "/b/" `"
   expect_output "${output}" "/a/b/"


# a/ b
   output="`filepath_concat "a/" "b" `"
   expect_output "${output}" "a/b"

# a/ b/
   output="`filepath_concat "a/" "b/" `"
   expect_output "${output}" "a/b/"

# a/ /b
   output="`filepath_concat "a/" "/b" `"
   expect_output "${output}" "a/b"

# a/ /b/
   output="`filepath_concat "a/" "/b/" `"
   expect_output "${output}" "a/b/"


# /a/ b
   output="`filepath_concat "/a/" "b" `"
   expect_output "${output}" "/a/b"

# /a/ b/
   output="`filepath_concat "/a/" "b/" `"
   expect_output "${output}" "/a/b/"

# /a/ /b
   output="`filepath_concat "/a/" "/b" `"
   expect_output "${output}" "/a/b"

# /a/ /b/
   output="`filepath_concat "/a/" "/b/" `"
   expect_output "${output}" "/a/b/"


# some more tests
# /a/ /b/
   output="`filepath_concat "/Volumes/Source/srcM/MulleEOF/MulleEOAdaptor/MulleSybaseEOAdaptor" "src/Base" `"
   expect_output "${output}" "/Volumes/Source/srcM/MulleEOF/MulleEOAdaptor/MulleSybaseEOAdaptor/src/Base"
}


main()
{
   test_filepath_concat

   echo "All tests passed" >&2
}


init()
{
   MULLE_BASHFUNCTIONS_LIBEXEC_DIR="${MULLE_BASHFUNCTIONS_LIBEXEC_DIR:-../../src}"

   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashglobal.sh" || exit 1
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-compatibility.sh" || exit 1
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-string.sh" || exit 1
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-logging.sh" || exit 1
}


init "$@"
main "$@"

