#! /bin/sh

[ "${TRACE}" = 'YES' ] && set -x && : "$0" "$@"

###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###
MULLE_BASHFUNCTIONS_LIBEXEC_DIR="${MULLE_BASHFUNCTIONS_LIBEXEC_DIR:-`mulle-bashfunctions libexec-dir`}" || exit 1

. "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-boot.sh"          || exit 1
. "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashglobal.sh"    || exit 1
. "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-compatibility.sh" || exit 1
. "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-logging.sh"       || exit 1
. "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-options.sh"       || exit 1
. "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-string.sh"        || exit 1
. "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-path.sh"          || exit 1
. "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-exekutor.sh"      || exit 1
. "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-file.sh"          || exit 1
###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###

expect_output()
{
   local output="$1"
   local expected="$2"

   if [ "${output}" != "${expected}" ]
   then
      echo "Got \"${output}\". Expected: \"${expected}\"" >&2
      echo "Output:" >&2
      hexdump -C <<< "${output}"
      echo "Expected:" >&2
      hexdump -C <<< "${expected}"
      stacktrace >&2
      exit 1
   fi
}


# use for lists w/o empty elements
comma_concat()
{
   r_comma_concat "$@"

   [ ! -z "${RVAL}" ] && printf "%s\n" "${RVAL}"
}



test_backslash()
{
   local output

# EMPTY STRING
   r_escaped_backslashes ''
   expect_output "${RVAL}" ""

   r_escaped_backslashes 'a'
   expect_output "${RVAL}" "a"

   r_escaped_backslashes '\'
   expect_output "${RVAL}" '\\'

   r_escaped_backslashes '\\'
   expect_output "${RVAL}" '\\\\'
}


test_doublequote()
{
   local output

# EMPTY STRING
   r_escaped_doublequotes ''
   expect_output "${RVAL}" ""

   r_escaped_doublequotes 'a'
   expect_output "${RVAL}" 'a'

   r_escaped_doublequotes '"'
   expect_output "${RVAL}" '\"'

   r_escaped_doublequotes '\"'
   expect_output "${RVAL}" '\\\"'

   r_escaped_doublequotes '""'
   expect_output "${RVAL}" '\"\"'

   r_escaped_doublequotes '"\\"'
   expect_output "${RVAL}" '\"\\\\\"'
}


test_singlequote()
{
   local output

# EMPTY STRING
   r_escaped_singlequotes ''
   expect_output "${RVAL}" ""

   r_escaped_singlequotes 'a'
   expect_output "${RVAL}" 'a'

   r_escaped_singlequotes "'"
   expect_output "${RVAL}" \'\"\'\"\'
}


test_comma_concat()
{
   local output

# EMPTY STRING
   output="`comma_concat "" ""`"
   expect_output "${output}" ""

   output="`comma_concat "," ""`"
   expect_output "${output}" ""

# ,
   output="`comma_concat "" ","`"
   expect_output "${output}" ""

   output="`comma_concat "," ","`"
   expect_output "${output}" ""

# ,,
   output="`comma_concat "" ",,"`"
   expect_output "${output}" ""

   output="`comma_concat ",," ",,"`"
   expect_output "${output}" ""

# a
   output="`comma_concat "a" ""`"
   expect_output "${output}" "a"

   output="`comma_concat "" "a"`"
   expect_output "${output}" "a"

# a,
   output="`comma_concat "a," ""`"
   expect_output "${output}" "a"

   output="`comma_concat "" "a,"`"
   expect_output "${output}" "a"

# ,a
   output="`comma_concat ",a" ""`"
   expect_output "${output}" "a"

   output="`comma_concat "" ",a"`"
   expect_output "${output}" "a"

# ,a,
   output="`comma_concat ",a," ""`"
   expect_output "${output}" "a"

   output="`comma_concat "" ",a,"`"
   expect_output "${output}" "a"

# a b
   output="`comma_concat "a" "b"`"
   expect_output "${output}" "a,b"

# ,a, ,b,
   output="`comma_concat ",a," ",b,"`"
   expect_output "${output}" "a,b"
}



test_sed_escape_pattern()
{
   r_escaped_sed_pattern ''
   expect_output "${RVAL}" ''

   r_escaped_sed_pattern "\\"
   expect_output "${RVAL}" "\\\\"

   r_escaped_sed_pattern '[$]/*.^'
   expect_output "${RVAL}" '\[\$\]\/\*\.\^'

   r_escaped_sed_pattern $'\n'
   expect_output "${RVAL}" "\\"$'\n'
}


test_sed_escape_replacement()
{
   r_escaped_sed_replacement ''
   expect_output "${RVAL}" ''

   r_escaped_sed_replacement "/"
   expect_output "${RVAL}" "\/"

   r_escaped_sed_replacement "\\"
   expect_output "${RVAL}" "\\\\"

   r_escaped_sed_replacement '&/'
   expect_output "${RVAL}" '\&\/'

   r_escaped_sed_replacement $'\n'
   expect_output "${RVAL}" "\\"$'\n'
}



main()
{
   test_backslash
   test_doublequote
   test_singlequote
   test_sed_escape_pattern
   test_sed_escape_replacement

   echo "All tests passed" >&2
}


main "$@"

