#! /bin/sh

[ "${TRACE:-}" = 'YES' ] && set -x && : "$0" "$@"

TEST_DIR="`dirname -- "$0"`"
PROJECT_DIR="$( cd "${TEST_DIR}/.." ; pwd -P)"

MULLE_BASHFUNCTIONS_LIBEXEC_DIR="${MULLE_BASHFUNCTIONS_LIBEXEC_DIR:-${PROJECT_DIR}/src}"
export MULLE_BASHFUNCTIONS_LIBEXEC_DIR



run_shell()
{
   shell="$1"; shift
   script="$1" ; shift

   # shellcheck disable=SC2034
   #
   # Quote incoming arguments for shell expansion
   #
   args=""
   for arg in "$@"
   do
      # True bourne sh doesn't know ${a//b/c} and <<<
      case "${arg}" in
         *\'*)
            # Use cat instead of echo to avoid possible echo -n
            # problems. Escape single quotes in string.
            arg="`cat <<EOF | sed -e s/\'/\'\\\"\'\\\"\'/g
${arg}
EOF
`"
         ;;
      esac
      if [ -z "${args}" ]
      then
         args="'${arg}'"
      else
         args="${args} '${arg}'"
      fi
   done


   if exe="`command -v "${shell}"`"
   then
      printf "%s\n" "------------------------------------------" >&2
      printf "%s\n" "$i: ${shell}" >&2
      printf "%s\n" "------------------------------------------" >&2

      "${exe}" -c ". \"${script}\" ${args}" "${script}"
   else
      return 0  # not installed ok
   fi
}


main()
{
   OPTION_LENIENT='NO'
   OPTION_SHELL=

   while [ $# -ne 0 ]
   do
      case "${1:-}" in
         -l|--lenient)
            OPTION_LENIENT=YES
         ;;

         --zsh)
            OPTION_SHELL=zsh
         ;;

         --bash)
            OPTION_SHELL=bash
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   if [ $# -ne 0 ]
   then
      if [ "$1" != '--' ]
      then
         pattern="$1"
      fi
      shift
   fi
   pattern=${pattern:-*}

   for i in "${TEST_DIR}"/${pattern}
   do
      if [ -x "$i/run-test" ]
      then
         (
            cd "$i"

            if [ -z "${OPTION_SHELL}" -o "${OPTION_SHELL}" = "bash" ]
            then
               if ! run_shell bash ./run-test "$@"
               then
                  [ "${OPTION_LENIENT}" != 'YES' ] && exit 1
               fi
            fi
            if [ -z "${OPTION_SHELL}" -o "${OPTION_SHELL}" = "zsh" ]
            then
               if ! run_shell zsh ./run-test "$@"
               then
                  [ "${OPTION_LENIENT}" != 'YES' ] && exit 1
               fi
            fi
#
# Dash chokes on <<< as redirection. But I don't want to live without it
# especialy for while read loop parsing
#
#            if ! run_shell dash ./run-test "$@"
#            then
#               [ "${OPTION_LENIENT}" != 'YES' ] && exit 1
#            fi
#
# We can never do ksh because it chokes up on bashisms even if they are
# 'if'ed away
#
#            if ! run_shell ksh ./run-test "$@"
#            then
#               [ "${OPTION_LENIENT}" != 'YES' ] && exit 1
#            fi
         ) || exit 1
      fi
   done
}

main "$@"
